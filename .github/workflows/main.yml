name: Build game and upload

on:
  workflow_dispatch:
  push:
    tags:
      - '*'
env:
  ITCH_GAME: ${{ vars.ITCH_GAME }}
  ITCH_USER: ${{ vars.ITCH_USER }}
  VERSION: ${{ github.ref_name }}
  PROJECT_DIR: 'Sample Unity Project/'
  BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
  
jobs:
  build:
    name: 'Build ${{ github.ref_name }} ${{ matrix.platform }}'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - platform: StandaloneLinux64
            module: linux-il2cpp
          - platform: StandaloneOSX
            module: mac-mono
          - platform: StandaloneWindows64
            module: windows-mono
          - platform: WebGL
            module: webgl
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.3.0
          
      - uses: actions/cache@v3
        with:
          path: '${{ env.PROJECT_DIR }}Library'
          key: Library-${{ hashFiles('${{ env.PROJECT_DIR }}Assets/**', '${{ env.PROJECT_DIR }}Packages/**', '${{ env.PROJECT_DIR }}ProjectSettings/**') }}
          restore-keys: |
            Library-
            
      - uses: actions-ecosystem/action-get-latest-tag@v1
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        id: get-latest-tag
        
      - name: Assign version to ${{ steps.get-latest-tag.outputs.tag }}
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "{VERSION}={steps.get-latest-tag.outputs.tag}" >> $GITHUB_ENV

      - name: Read project version
        id: read-project-version
        shell: python
        run: |
          import os
          import json

          projectDir = '${{ env.PROJECT_DIR }}'
          with open(projectDir + 'ProjectSettings/ProjectVersion.txt', 'r') as fh:
            projectVersion = fh.read().split(' ')[2]
            with open (os.getenv('GITHUB_ENV'), 'a') as fh2:
              fh2.write(f'PROJECT_VERSION=' + projectVersion)
      
      - name: Build project
        uses: game-ci/unity-builder@v2.1.2
        with:
          projectPath: '${{ env.PROJECT_DIR }}'
          allowDirtyBuild: true
          targetPlatform: '${{ matrix.platform }}'
          customImage: mobsakai/unity3d:${{ env.PROJECT_VERSION }}-${{ matrix.module }}

      - uses: josephbmanley/butler-publish-itchio-action@master
        if: ${{ contains(matrix.platform, 'Windows') }}
        env:
          PACKAGE: 'build/${{ matrix.platform }}'
          CHANNEL: windows
      - uses: josephbmanley/butler-publish-itchio-action@master
        if: ${{ contains(matrix.platform, 'OSX') }}
        env:
          PACKAGE: 'build/${{ matrix.platform }}'
          CHANNEL: osx
      - uses: josephbmanley/butler-publish-itchio-action@master
        if: ${{ contains(matrix.platform, 'Linux') }}
        env:
          PACKAGE: 'build/${{ matrix.platform }}'
          CHANNEL: linux
      - uses: josephbmanley/butler-publish-itchio-action@master
        if: ${{ contains(matrix.platform, 'WebGL') }}
        env:
          PACKAGE: 'build/${{ matrix.platform }}/WebGL'
          CHANNEL: html5
